* A basic instruction set for the JASP architecture.
*
* Originally based on an instruction set
* by William Henderson.
*
* This instruction set is purely for use in
* memory locations $00 to $FF.  Many instructions
* make use of movements from the ir(operand),
* and so cannot address memory locations above $FF.
*
* All instructions are one word, the hi-byte
* of each is the opcode.
*
* Revision : 2.0.7
* Author   : Mark Burrell
* Date     : 16-FEB-2003
*
*
Fetch
* fetch cycle definition
MAR<-[PC]    
INC<-[PC]    
PC<-[INC]    
MDR<-[M[MAR]]    
IR<-[MDR]    
CU<-[IR(opcode)]    

Interrupt
* interrupt routine
PSR(I)=0                    interrupt flag = 0
MAR<-[SP]                     }     save PSR
MDR<-[PSR]                    }     on the stack
M[MAR]<-[MDR]                 }
ALUx<-[SP]                  }  decrement
ALUr=[ALUx]-1               }  SP
SP<-[ALUr]                  }
ALUx<-[PC]                    }
MDR<-[ALUx]                   }     write PC
MAR<-[SP]                     }     to the stack
M[MAR]<-[MDR]                 }
ALUx<-[SP]                  }  decrement
ALUr=[ALUx]-1               }  SP
SP<-[ALUr]                  }
PSR(E)=0                    interrupt enable flag = 0
ALUy<-[JUMPERS(IntBase)]      }
ALUx<-[PSR(IntVec)]           } build the vector address
ALUr=[ALUx]+[ALUy]            }
MAR<-[ALUr]                 } obtain the handler address
MDR<-[M[MAR]]               }
PC<-[MDR]                   load address of handler into PC

Opcode fa
Mnemonic "TRAP #data"
Description "Software interrupt mechanism"
* programmably trigger the interrupt routine
*
* The #data value is masked with %00000111
* to produce the interrupt number
*
PSR(IntVec)<-[IR(operand)]     } Load the PSR with the Interrupt Vector
PSR(I)=1                       } Fire the interrupt

Opcode 00
* data 00 to FF, sign extended
Mnemonic "ADD #data,A"
Description "Add to reg. A an immediate oper."
ALUx<-[A]    
ALUy<-[IR(operand)]    
ALUr=[ALUx]+[ALUy]    
A<-[ALUr]    

Opcode 01
* data 00 to FF, sign extended
Mnemonic "ADD #data,B"
Description "Add to reg. B an immediate oper."
ALUx<-[B]    
ALUy<-[IR(operand)]    
ALUr=[ALUx]+[ALUy]    
B<-[ALUr]    

Opcode 02
* addr 00 to FF
Mnemonic "ADD addr,A"
Description "Add to reg. A from a direct addr."
MAR<-[IR(operand)]    
MDR<-[M[MAR]]    
ALUy<-[MDR]    
ALUx<-[A]    
ALUr=[ALUx]+[ALUy]    
A<-[ALUr]    

Opcode 03
* addr 00 to FF
Mnemonic "ADD addr,B"
Description "Add to reg. B from a direct addr."
MAR<-[IR(operand)]    
MDR<-[M[MAR]]    
ALUy<-[MDR]    
ALUx<-[B]    
ALUr=[ALUx]+[ALUy]    
B<-[ALUr]    

Opcode 04
* addr and (addr) 00 to FF
Mnemonic "ADD (addr),A"
Description "Add to reg. A from an indirect addr."
MAR<-[IR(operand)]    
MDR<-[M[MAR]]    
IR<-[MDR]    
MAR<-[IR(operand)]    
MDR<-[M[MAR]]    
ALUy<-[MDR]    
ALUx<-[A]    
ALUr=[ALUx]+[ALUy]    
A<-[ALUr]    

Opcode 05
* addr and (addr) 00 to FF
Mnemonic "ADD (addr),B"
Description "Add to reg. B from an indirect addr."
MAR<-[IR(operand)]    
MDR<-[M[MAR]]    
IR<-[MDR]    
MAR<-[IR(operand)]    
MDR<-[M[MAR]]    
ALUy<-[MDR]    
ALUx<-[B]    
ALUr=[ALUx]+[ALUy]    
B<-[ALUr]    

Opcode 06
Mnemonic "ADD B,A"
Description "Add B reg. to contents of A reg."
ALUy<-[A]    
ALUx<-[B]    
ALUr=[ALUx]+[ALUy]    
A<-[ALUr]    

Opcode 07
Mnemonic "ADD A,B"
Description "Add A reg. to contents of B reg."
ALUy<-[A]    
ALUx<-[B]    
ALUr=[ALUx]+[ALUy]    
B<-[ALUr]    

Opcode 08
Mnemonic "ADD (B),A"
Description "Add B reg. indirect oper. to A reg."
MAR<-[B]    
MDR<-[M[MAR]]    
ALUy<-[MDR]    
ALUx<-[A]    
ALUr=[ALUx]+[ALUy]    
A<-[ALUr]    

Opcode 09
Mnemonic "ADD (A),B"
Description "Add A reg. indirect oper. to B reg."
MAR<-[A]    
MDR<-[M[MAR]]    
ALUy<-[MDR]    
ALUx<-[B]    
ALUr=[ALUx]+[ALUy]    
B<-[ALUr]    

Opcode 0a
* addr 00 to FF
Mnemonic "ADD B+addr,A"
Description "Add to reg. A from an indexed addr. (index in B)"
ALUy<-[IR(operand)]    
ALUx<-[B]    
ALUr=[ALUx]+[ALUy]    
MAR<-[ALUr]    
MDR<-[M[MAR]]    
ALUy<-[MDR]    
ALUx<-[A]    
ALUr=[ALUx]+[ALUy]    
A<-[ALUr]    

Opcode 0b
* addr 00 to FF
Mnemonic "ADD A+addr,B"
Description "Add to reg. B from an indexed addr. (index in A)"
ALUy<-[IR(operand)]    
ALUx<-[A]    
ALUr=[ALUx]+[ALUy]    
MAR<-[ALUr]    
MDR<-[M[MAR]]    
ALUy<-[MDR]    
ALUx<-[B]    
ALUr=[ALUx]+[ALUy]    
B<-[ALUr]    

Opcode 10
* data 00 to FF, sign extended
Mnemonic "ADC #data,A"
Description "Add with carry to reg. A an immediate oper."
ALUx<-[A]    
ALUy<-[IR(operand)]    
ALUr=[ALUx]+[ALUy]+[PSR(c)]    
A<-[ALUr]    

Opcode 11
* data 00 to FF, sign extended
Mnemonic "ADC #data,B"
Description "Add with carry to reg. B an immediate oper."
ALUx<-[B]    
ALUy<-[IR(operand)]    
ALUr=[ALUx]+[ALUy]+[PSR(c)]    
B<-[ALUr]    

Opcode 12
* addr 00 to FF
Mnemonic "ADC addr,A"
Description "Add with carry to reg. A from a direct addr."
MAR<-[IR(operand)]    
MDR<-[M[MAR]]    
ALUy<-[MDR]    
ALUx<-[A]    
ALUr=[ALUx]+[ALUy]+[PSR(c)]    
A<-[ALUr]    

Opcode 13
* addr 00 to FF
Mnemonic "ADC addr,B"
Description "Add with carry to reg. B from a direct addr."
MAR<-[IR(operand)]    
MDR<-[M[MAR]]    
ALUy<-[MDR]    
ALUx<-[B]    
ALUr=[ALUx]+[ALUy]+[PSR(c)]    
B<-[ALUr]    

Opcode 14
* addr and (addr) 00 to FF
Mnemonic "ADC (addr),A"
Description "Add with carry to reg. A from an indirect addr."
MAR<-[IR(operand)]    
MDR<-[M[MAR]]    
IR<-[MDR]    
MAR<-[IR(operand)]    
MDR<-[M[MAR]]    
ALUy<-[MDR]    
ALUx<-[A]    
ALUr=[ALUx]+[ALUy]+[PSR(c)]    
A<-[ALUr]    

Opcode 15
* addr and (addr) 00 to FF
Mnemonic "ADC (addr),B"
Description "Add with carry to reg. B from an indirect addr."
MAR<-[IR(operand)]    
MDR<-[M[MAR]]    
IR<-[MDR]    
MAR<-[IR(operand)]    
MDR<-[M[MAR]]    
ALUy<-[MDR]    
ALUx<-[B]    
ALUr=[ALUx]+[ALUy]+[PSR(c)]    
B<-[ALUr]    

Opcode 16
Mnemonic "ADC B,A"
Description "Add with carry to A reg. from B reg."
ALUy<-[B]    
ALUx<-[A]    
ALUr=[ALUx]+[ALUy]+[PSR(c)]    
A<-[ALUr]    

Opcode 17
Mnemonic "ADC A,B"
Description "Add with carry to B reg. from A reg."
ALUy<-[A]    
ALUx<-[B]    
ALUr=[ALUx]+[ALUy]+[PSR(c)]    
B<-[ALUr]    

Opcode 18
Mnemonic "ADC (B),A"
Description "Add with carry to B reg. a reg. indirect oper."
MAR<-[B]    
MDR<-[M[MAR]]    
ALUy<-[MDR]    
ALUx<-[A]    
ALUr=[ALUx]+[ALUy]+[PSR(c)]    
A<-[ALUr]    

Opcode 19
Mnemonic "ADC (A),B"
Description "Add with carry to B reg. a reg. indirect oper."
MAR<-[A]    
MDR<-[M[MAR]]    
ALUy<-[MDR]    
ALUx<-[B]    
ALUr=[ALUx]+[ALUy]+[PSR(c)]    
B<-[ALUr]    

Opcode 1a
* addr 00 to FF
Mnemonic "ADC B+addr,A"
Description "Add with carry to reg. A an indexed oper. (index in B)"
ALUy<-[IR(operand)]    
ALUx<-[B]    
ALUr=[ALUx]+[ALUy]    
MAR<-[ALUr]    
MDR<-[M[MAR]]    
ALUy<-[MDR]    
ALUx<-[A]    
ALUr=[ALUx]+[ALUy]+[PSR(c)]    
A<-[ALUr]    

Opcode 1b
* addr 00 to FF
Mnemonic "ADC A+addr,B"
Description "Add with carry to reg. B an indexed oper. (index in A)"
ALUy<-[IR(operand)]    
ALUx<-[A]    
ALUr=[ALUx]+[ALUy]    
MAR<-[ALUr]    
MDR<-[M[MAR]]    
ALUy<-[MDR]    
ALUx<-[B]    
ALUr=[ALUx]+[ALUy]+[PSR(c)]    
B<-[ALUr]    

Opcode 20
* data 00 to FF, sign extended
Mnemonic "SUB #data,A"
Description "Subtract an immediate oper. from A reg"
ALUx<-[A]    
ALUy<-[IR(operand)]    
ALUr=[ALUx]-[ALUy]    
A<-[ALUr]    

Opcode 21
* data 00 to FF, sign extended
Mnemonic "SUB #data,B"
Description "Subtract an immediate oper. from B reg"
ALUx<-[B]    
ALUy<-[IR(operand)]    
ALUr=[ALUx]-[ALUy]    
B<-[ALUr]    

Opcode 22
* addr 00 to FF
Mnemonic "SUB addr,A"
Description "Subtract from reg. A a direct oper."
MAR<-[IR(operand)]    
MDR<-[M[MAR]]    
ALUx<-[A]    
ALUy<-[MDR]    
ALUr=[ALUx]-[ALUy]    
A<-[ALUr]    

Opcode 23
* addr 00 to FF
Mnemonic "SUB addr,B"
Description "Subtract from reg. B a direct oper."
MAR<-[IR(operand)]    
MDR<-[M[MAR]]    
ALUx<-[B]    
ALUy<-[MDR]    
ALUr=[ALUx]-[ALUy]    
B<-[ALUr]    

Opcode 24
* addr and (addr) 00 to FF
Mnemonic "SUB (addr),A"
Description "Subtract from reg. A an indirect oper."
MAR<-[IR(operand)]    
MDR<-[M[MAR]]    
IR<-[MDR]    
MAR<-[IR(operand)]    
MDR<-[M[MAR]]    
ALUx<-[A]    
ALUy<-[MDR]    
ALUr=[ALUx]-[ALUy]    
A<-[ALUr]    

Opcode 25
* addr and (addr) 00 to FF
Mnemonic "SUB (addr),B"
Description "Subtract from reg. B an indirect oper."
MAR<-[IR(operand)]    
MDR<-[M[MAR]]    
IR<-[MDR]    
MAR<-[IR(operand)]    
MDR<-[M[MAR]]    
ALUx<-[B]    
ALUy<-[MDR]    
ALUr=[ALUx]-[ALUy]    
B<-[ALUr]    

Opcode 26
Mnemonic "SUB B,A"
Description "Subtract from reg. A the contents of reg. B"
ALUx<-[A]    
ALUy<-[B]    
ALUr=[ALUx]-[ALUy]    
A<-[ALUr]    

Opcode 27
Mnemonic "SUB A,B"
Description "Subtract from reg. B the contents of reg. A"
ALUx<-[B]    
ALUy<-[A]    
ALUr=[ALUx]-[ALUy]    
B<-[ALUr]    

Opcode 28
Mnemonic "SUB (B),A"
Description "Subtract from reg. A a reg. indirect oper."
MAR<-[B]    
MDR<-[M[MAR]]    
ALUx<-[A]    
ALUy<-[MDR]    
ALUr=[ALUx]-[ALUy]    
A<-[ALUr]    

Opcode 29
Mnemonic "SUB (A),B"
Description "Subtract from reg. B a reg. indirect oper."
MAR<-[A]    
MDR<-[M[MAR]]    
ALUx<-[B]    
ALUy<-[MDR]    
ALUr=[ALUx]-[ALUy]    
B<-[ALUr]    

Opcode 2a
* addr 00 to FF
Mnemonic "SUB B+addr,A"
Description "Subtract an indexed oper. from the reg. A (index in B)"
ALUy<-[IR(operand)]    
ALUx<-[B]    
ALUr=[ALUx]+[ALUy]    
MAR<-[ALUr]    
MDR<-[M[MAR]]    
ALUy<-[MDR]    
ALUx<-[A]    
ALUr=[ALUx]-[ALUy]    
A<-[ALUr]    

Opcode 2b
* addr 00 to FF
Mnemonic "SUB A+addr,B"
Description "Subtract an indexed oper. from the reg. B (index in A)"
ALUy<-[IR(operand)]    
ALUx<-[A]    
ALUr=[ALUx]+[ALUy]    
MAR<-[ALUr]    
MDR<-[M[MAR]]    
ALUy<-[MDR]    
ALUx<-[B]    
ALUr=[ALUx]-[ALUy]    
B<-[ALUr]    

Opcode 32
* addr 00 to FF
Mnemonic "SHL addr"
Description "Shift left a memory direct oper."
MAR<-[IR(operand)]    
MDR<-[M[MAR]]    
ALUx<-[MDR]    
ALUr=[ALUx]<<1    
MDR<-[ALUr]    
M[MAR]<-[MDR]    

Opcode 34
* addr and (addr) 00 to FF
Mnemonic "SHL (addr)"
Description "Shift left a memory indirect oper."
MAR<-[IR(operand)]    
MDR<-[M[MAR]]    
IR<-[MDR]    
MAR<-[IR(operand)]    
MDR<-[M[MAR]]    
ALUx<-[MDR]    
ALUr=[ALUx]<<1    
MDR<-[ALUr]    
M[MAR]<-[MDR]    

Opcode 36
Mnemonic "SHL A"
Description "Shift left reg. A"
ALUx<-[A]    
ALUr=[ALUx]<<1    
A<-[ALUr]    

Opcode 37
Mnemonic "SHL B"
Description "Shift left reg. B"
ALUx<-[B]    
ALUr=[ALUx]<<1    
B<-[ALUr]    

Opcode 38
Mnemonic "SHL (A)"
Description "Shift left a reg. indirect oper., addr. in A"
MAR<-[A]    
MDR<-[M[MAR]]    
ALUx<-[MDR]    
ALUr=[ALUx]<<1    
MDR<-[ALUr]    
M[MAR]<-[MDR]    

Opcode 39
Mnemonic "SHL (B)"
Description "Shift left a reg. indirect oper., addr. in B"
MAR<-[B]    
MDR<-[M[MAR]]    
ALUx<-[MDR]    
ALUr=[ALUx]<<1    
MDR<-[ALUr]    
M[MAR]<-[MDR]    

Opcode 3a
* addr 00 to FF
Mnemonic "SHL A+addr"
Description "Shift left an indexed oper. (index in A)"
ALUy<-[IR(operand)]    
ALUx<-[A]    
ALUr=[ALUx]+[ALUy]    
MAR<-[ALUr]    
MDR<-[M[MAR]]    
ALUx<-[MDR]    
ALUr=[ALUx]<<1    
MDR<-[ALUr]    
M[MAR]<-[MDR]    

Opcode 3b
* addr 00 to FF
Mnemonic "SHL B+addr"
Description "Shift left an indexed oper. (index in B)"
ALUy<-[IR(operand)]    
ALUx<-[B]    
ALUr=[ALUx]+[ALUy]    
MAR<-[ALUr]    
MDR<-[M[MAR]]    
ALUx<-[MDR]    
ALUr=[ALUx]<<1    
MDR<-[ALUr]    
M[MAR]<-[MDR]    

Opcode 42
* addr 00 to FF
Mnemonic "SHR addr"
Description "Shift right a direct oper."
MAR<-[IR(operand)]    
MDR<-[M[MAR]]    
ALUx<-[MDR]    
ALUr=[ALUx]>>1    
MDR<-[ALUr]    
M[MAR]<-[MDR]    

Opcode 44
* addr and (addr) 00 to FF
Mnemonic "SHR (addr)"
Description "Shift right a memory indirect oper."
MAR<-[IR(operand)]    
MDR<-[M[MAR]]    
IR<-[MDR]    
MAR<-[IR(operand)]    
MDR<-[M[MAR]]    
ALUx<-[MDR]    
ALUr=[ALUx]>>1    
MDR<-[ALUr]    
M[MAR]<-[MDR]    

Opcode 46
Mnemonic "SHR A"
Description "Shift right the contents of reg. A"
ALUx<-[A]    
ALUr=[ALUx]>>1    
A<-[ALUr]    

Opcode 47
Mnemonic "SHR B"
Description "Shift right the contents of reg. B"
ALUx<-[B]    
ALUr=[ALUx]>>1    
B<-[ALUr]    

Opcode 48
Mnemonic "SHR (A)"
Description "Shift right a reg. indirect oper."
MAR<-[A]    
MDR<-[M[MAR]]    
ALUx<-[MDR]    
ALUr=[ALUx]>>1    
MDR<-[ALUr]    
M[MAR]<-[MDR]    

Opcode 49
Mnemonic "SHR (B)"
Description "Shift right a reg. indirect oper."
MAR<-[B]    
MDR<-[M[MAR]]    
ALUx<-[MDR]    
ALUr=[ALUx]>>1    
MDR<-[ALUr]    
M[MAR]<-[MDR]    

Opcode 4a
* addr 00 to FF
Mnemonic "SHR A+addr"
Description "Shift right a memory indexed oper. (index in A)"
ALUy<-[IR(operand)]    
ALUx<-[A]    
ALUr=[ALUx]+[ALUy]    
MAR<-[ALUr]    
MDR<-[M[MAR]]    
ALUx<-[MDR]    
ALUr=[ALUx]>>1    
MDR<-[ALUr]    
M[MAR]<-[MDR]    

Opcode 4b
* addr 00 to FF
Mnemonic "SHR B+addr"
Description "Shift right a memory indexed oper. (Index in B)"
ALUy<-[IR(operand)]    
ALUx<-[B]    
ALUr=[ALUx]+[ALUy]    
MAR<-[ALUr]    
MDR<-[M[MAR]]    
ALUx<-[MDR]    
ALUr=[ALUx]>>1    
MDR<-[ALUr]    
M[MAR]<-[MDR]    

Opcode 50
* data 00 to FF, sign extended
Mnemonic "AND #data,A"
Description "AND operation on A reg and an immediate oper."
ALUy<-[IR(operand)]    
ALUx<-[A]    
ALUr=[ALUx]&[ALUy]    
A<-[ALUr]    

Opcode 51
* data 00 to FF, sign extended
Mnemonic "AND #data,B"
Description "AND operation on B reg and an immediate oper."
ALUy<-[IR(operand)]    
ALUx<-[B]    
ALUr=[ALUx]&[ALUy]    
B<-[ALUr]    

Opcode 52
* addr 00 to FF
Mnemonic "AND addr,A"
Description "AND operation on A and a direct oper."
MAR<-[IR(operand)]    
MDR<-[M[MAR]]    
ALUy<-[MDR]    
ALUx<-[A]    
ALUr=[ALUx]&[ALUy]    
A<-[ALUr]    

Opcode 53
* addr 00 to FF
Mnemonic "AND addr,B"
Description "AND operation on B and a direct oper."
MAR<-[IR(operand)]    
MDR<-[M[MAR]]    
ALUy<-[MDR]    
ALUx<-[B]    
ALUr=[ALUx]&[ALUy]    
B<-[ALUr]    

Opcode 54
* addr and (addr) 00 to FF
Mnemonic "AND (addr),A"
Description "AND operation on A and an indirect oper."
MAR<-[IR(operand)]    
MDR<-[M[MAR]]    
IR<-[MDR]    
MAR<-[IR(operand)]    
MDR<-[M[MAR]]    
ALUy<-[MDR]    
ALUx<-[A]    
ALUr=[ALUx]&[ALUy]    
A<-[ALUr]    

Opcode 55
* addr and (addr) 00 to FF
Mnemonic "AND (addr),B"
Description "AND operation on B and an indirect oper."
MAR<-[IR(operand)]    
MDR<-[M[MAR]]    
IR<-[MDR]    
MAR<-[IR(operand)]    
MDR<-[M[MAR]]    
ALUy<-[MDR]    
ALUx<-[B]    
ALUr=[ALUx]&[ALUy]    
B<-[ALUr]    

Opcode 56
Mnemonic "AND B,A"
Description "AND on A and B, result in A"
ALUy<-[B]    
ALUx<-[A]    
ALUr=[ALUx]&[ALUy]    
A<-[ALUr]    

Opcode 57
Mnemonic "AND A,B"
Description "AND on B and A, result in B"
ALUy<-[A]    
ALUx<-[B]    
ALUr=[ALUx]&[ALUy]    
B<-[ALUr]    

Opcode 58
Mnemonic "AND (B),A"
Description "AND on A and a reg. indirect oper."
MAR<-[B]    
MDR<-[M[MAR]]    
ALUx<-[MDR]    
ALUy<-[A]    
ALUr=[ALUx]&[ALUy]    
A<-[ALUr]    

Opcode 59
Mnemonic "AND (A),B"
Description "AND on B and a reg. indirect oper."
MAR<-[A]    
MDR<-[M[MAR]]    
ALUx<-[MDR]    
ALUy<-[B]    
ALUr=[ALUx]&[ALUy]    
B<-[ALUr]    

Opcode 5a
* addr 00 to FF
Mnemonic "AND B+addr,A"
Description "AND operation on A and an indexed oper."
ALUy<-[IR(operand)]    
ALUx<-[B]    
ALUr=[ALUx]+[ALUy]    
MAR<-[ALUr]    
MDR<-[M[MAR]]    
ALUy<-[MDR]    
ALUx<-[A]    
ALUr=[ALUx]&[ALUy]    
A<-[ALUr]    

Opcode 5b
* addr 00 to FF
Mnemonic "AND A+addr,B"
Description "AND operation on B and an indexed oper."
ALUy<-[IR(operand)]    
ALUx<-[A]    
ALUr=[ALUx]+[ALUy]    
MAR<-[ALUr]    
MDR<-[M[MAR]]    
ALUy<-[MDR]    
ALUx<-[B]    
ALUr=[ALUx]&[ALUy]    
B<-[ALUr]    

Opcode 60
* data 00 to FF, sign extended
Mnemonic "OR #data,A"
Description "OR operation on A reg and an immediate oper."
ALUy<-[IR(operand)]    
ALUx<-[A]    
ALUr=[ALUx]|[ALUy]    
A<-[ALUr]    

Opcode 61
* data 00 to FF, sign extended
Mnemonic "OR #data,B"
Description "OR operation on B reg and an immediate oper."
ALUy<-[IR(operand)]    
ALUx<-[B]    
ALUr=[ALUx]|[ALUy]    
B<-[ALUr]    

Opcode 62
* addr 00 to FF
Mnemonic "OR addr,A"
Description "OR operation on A and a direct oper."
MAR<-[IR(operand)]    
MDR<-[M[MAR]]    
ALUy<-[MDR]    
ALUx<-[A]    
ALUr=[ALUx]|[ALUy]    
A<-[ALUr]    

Opcode 63
* addr 00 to FF
Mnemonic "OR addr,B"
Description "OR operation on B and a direct oper."
MAR<-[IR(operand)]    
MDR<-[M[MAR]]    
ALUy<-[MDR]    
ALUx<-[B]    
ALUr=[ALUx]|[ALUy]    
B<-[ALUr]    

Opcode 64
* addr and (addr) 00 to FF
Mnemonic "OR (addr),A"
Description "OR operation on A and an indirect oper."
MAR<-[IR(operand)]    
MDR<-[M[MAR]]    
IR<-[MDR]    
MAR<-[IR(operand)]    
MDR<-[M[MAR]]    
ALUy<-[MDR]    
ALUx<-[A]    
ALUr=[ALUx]|[ALUy]    
A<-[ALUr]    

Opcode 65
* addr and (addr) 00 to FF
Mnemonic "OR (addr),B"
Description "OR operation on B and an indirect oper."
MAR<-[IR(operand)]    
MDR<-[M[MAR]]    
IR<-[MDR]    
MAR<-[IR(operand)]    
MDR<-[M[MAR]]    
ALUy<-[MDR]    
ALUx<-[B]    
ALUr=[ALUx]|[ALUy]    
B<-[ALUr]    

Opcode 66
Mnemonic "OR B,A"
Description "OR on A and B, result in A"
ALUy<-[B]    
ALUx<-[A]    
ALUr=[ALUx]|[ALUy]    
A<-[ALUr]    

Opcode 67
Mnemonic "OR A,B"
Description "OR on B and A, result in B"
ALUy<-[A]    
ALUx<-[B]    
ALUr=[ALUx]|[ALUy]    
B<-[ALUr]    

Opcode 68
Mnemonic "OR (B),A"
Description "OR on A and a reg. indirect oper."
MAR<-[B]    
MDR<-[M[MAR]]    
ALUx<-[MDR]    
ALUy<-[A]    
ALUr=[ALUx]|[ALUy]    
A<-[ALUr]    

Opcode 69
Mnemonic "OR (A),B"
Description "OR on B and a reg. indirect oper."
MAR<-[A]    
MDR<-[M[MAR]]    
ALUx<-[MDR]    
ALUy<-[B]    
ALUr=[ALUx]|[ALUy]    
B<-[ALUr]    

Opcode 6a
* addr 00 to FF
Mnemonic "OR B+addr,A"
Description "OR operation on A and an indexed oper."
ALUy<-[IR(operand)]    
ALUx<-[B]    
ALUr=[ALUx]+[ALUy]    
MAR<-[ALUr]    
MDR<-[M[MAR]]    
ALUy<-[MDR]    
ALUx<-[A]    
ALUr=[ALUx]|[ALUy]    
A<-[ALUr]    

Opcode 6b
* addr 00 to FF
Mnemonic "OR A+addr,B"
Description "OR operation on B and an indexed oper."
ALUy<-[IR(operand)]    
ALUx<-[A]    
ALUr=[ALUx]+[ALUy]    
MAR<-[ALUr]    
MDR<-[M[MAR]]    
ALUy<-[MDR]    
ALUx<-[B]    
ALUr=[ALUx]|[ALUy]    
B<-[ALUr]    

Opcode 72
* addr 00 to FF
Mnemonic "NOT addr"
Description "NOT operation on a direct oper."
MAR<-[IR(operand)]    
MDR<-[M[MAR]]    
ALUx<-[MDR]    
ALUr=~[ALUx]    
MDR<-[ALUr]    
M[MAR]<-[MDR]    

Opcode 74
* addr and (addr) 00 to FF
Mnemonic "NOT (addr)"
Description "NOT operation on an indirect oper."
MAR<-[IR(operand)]    
MDR<-[M[MAR]]    
IR<-[MDR]    
MAR<-[IR(operand)]    
MDR<-[M[MAR]]    
ALUx<-[MDR]    
ALUr=~[ALUx]    
MDR<-[ALUr]    
M[MAR]<-[MDR]    

Opcode 76
Mnemonic "NOT A"
Description "NOT operation on A reg."
ALUx<-[A]    
ALUr=~[ALUx]    
A<-[ALUr]    

Opcode 77
Mnemonic "NOT B"
Description "NOT operation on B reg."
ALUx<-[B]    
ALUr=~[ALUx]    
B<-[ALUr]    

Opcode 78
Mnemonic "NOT (A)"
Description "NOT on a reg. indirect oper. (address in A)"
MAR<-[A]    
MDR<-[M[MAR]]    
ALUx<-[MDR]    
ALUr=~[ALUx]    
MDR<-[ALUr]    
M[MAR]<-[MDR]    

Opcode 79
Mnemonic "NOT (B)"
Description "NOT on a reg. indirect oper. (address in B)"
MAR<-[B]    
MDR<-[M[MAR]]    
ALUx<-[MDR]    
ALUr=~[ALUx]    
MDR<-[ALUr]    
M[MAR]<-[MDR]    

Opcode 7a
* addr 00 to FF
Mnemonic "NOT A+addr"
Description "NOT on an indexed oper. (index in A)"
ALUx<-[A]    
ALUy<-[IR(operand)]    
ALUr=[ALUx]+[ALUy]    
MAR<-[ALUr]    
MDR<-[M[MAR]]    
ALUx<-[MDR]    
ALUr=~[ALUx]    
MDR<-[ALUr]    
M[MAR]<-[MDR]    

Opcode 7b
* addr 00 to FF
Mnemonic "NOT B+addr"
Description "NOT on an indexed oper. (index in B)"
ALUx<-[B]    
ALUy<-[IR(operand)]    
ALUr=[ALUx]+[ALUy]    
MAR<-[ALUr]    
MDR<-[M[MAR]]    
ALUx<-[MDR]    
ALUr=~[ALUx]    
MDR<-[ALUr]    
M[MAR]<-[MDR]    

Opcode 7c
Mnemonic "SWAP A"
Description "Swap A register lo and hi bytes"
ALUx<-[A]    
ALUr(7:0)=[ALUx(15:8)];ALUr(15:8)=[ALUx(7:0)]    
A<-[ALUr]    

Opcode 7d
Mnemonic "SWAP B"
Description "Swap B register lo and hi bytes"
ALUx<-[B]    
ALUr(7:0)=[ALUx(15:8)];ALUr(15:8)=[ALUx(7:0)]    
B<-[ALUr]    

Opcode 80
* data 00 to FF, sign extended
Mnemonic "CMP #data,A"
Description "Compare an immediate oper. with A reg"
ALUx<-[A]    
ALUy<-[IR(operand)]    
ALUr=[ALUx]-[ALUy]    

Opcode 81
* data 00 to FF, sign extended
Mnemonic "CMP #data,B"
Description "Compare an immediate oper. with B reg"
ALUx<-[B]    
ALUy<-[IR(operand)]    
ALUr=[ALUx]-[ALUy]    

Opcode 82
* addr 00 to FF
Mnemonic "CMP addr,A"
Description "Compare a direct oper. with A reg."
MAR<-[IR(operand)]    
MDR<-[M[MAR]]    
ALUy<-[MDR]    
ALUx<-[A]    
ALUr=[ALUx]-[ALUy]    

Opcode 83
* addr 00 to FF
Mnemonic "CMP addr,B"
Description "Compare a direct oper. with B reg."
MAR<-[IR(operand)]    
MDR<-[M[MAR]]    
ALUy<-[MDR]    
ALUx<-[B]    
ALUr=[ALUx]-[ALUy]    

Opcode 84
* addr and (addr) 00 to FF
Mnemonic "CMP (addr),A"
Description "Compare an indirect oper. with A reg."
MAR<-[IR(operand)]    
MDR<-[M[MAR]]    
IR<-[MDR]    
MAR<-[IR(operand)]    
MDR<-[M[MAR]]    
ALUy<-[MDR]    
ALUx<-[A]    
ALUr=[ALUx]-[ALUy]    

Opcode 85
* addr and (addr) 00 to FF
Mnemonic "CMP (addr),B"
Description "Compare an indirect oper. with B reg."
MAR<-[IR(operand)]    
MDR<-[M[MAR]]    
IR<-[MDR]    
MAR<-[IR(operand)]    
MDR<-[M[MAR]]    
ALUy<-[MDR]    
ALUx<-[B]    
ALUr=[ALUx]-[ALUy]    

Opcode 86
Mnemonic "CMP B,A"
Description "Compare A and B reg."
ALUx<-[A]    
ALUy<-[B]    
ALUr=[ALUx]-[ALUy]    

Opcode 87
Mnemonic "CMP A,B"
Description "Compare B and A reg."
ALUx<-[B]    
ALUy<-[A]    
ALUr=[ALUx]-[ALUy]    

Opcode 88
Mnemonic "CMP (B),A"
Description "Compare A with a reg. indirect oper."
MAR<-[B]    
MDR<-[M[MAR]]    
ALUx<-[A]    
ALUy<-[MDR]    
ALUr=[ALUx]-[ALUy]    

Opcode 89
Mnemonic "CMP (A),B"
Description "Compare B with a reg. indirect oper."
MAR<-[A]    
MDR<-[M[MAR]]    
ALUx<-[B]    
ALUy<-[MDR]    
ALUr=[ALUx]-[ALUy]    

Opcode 8a
* addr 00 to FF
Mnemonic "CMP B+addr,A"
Description "Compare with A an indexed oper."
ALUx<-[B]    
ALUy<-[IR(operand)]    
ALUr=[ALUx]+[ALUy]    
MAR<-[ALUr]    
MDR<-[M[MAR]]    
ALUx<-[A]    
ALUy<-[MDR]    
ALUr=[ALUx]-[ALUy]    

Opcode 8b
* addr 00 to FF
Mnemonic "CMP A+addr,B"
Description "Compare with B an indexed oper."
ALUx<-[A]    
ALUy<-[IR(operand)]    
ALUr=[ALUx]+[ALUy]    
MAR<-[ALUr]    
MDR<-[M[MAR]]    
ALUx<-[B]    
ALUy<-[MDR]    
ALUr=[ALUx]-[ALUy]    

Opcode 8c
Mnemonic "PUSH A"
Description "Push A onto the stack"
MAR<-[SP]    
MDR<-[A]    
M[MAR]<-[MDR]    
ALUx<-[SP]    
ALUr=[ALUx]-1    
SP<-[ALUr]    

Opcode 8d
Mnemonic "PUSH B"
Description "Push B onto the stack"
MAR<-[SP]    
MDR<-[B]    
M[MAR]<-[MDR]    
ALUx<-[SP]    
ALUr=[ALUx]-1    
SP<-[ALUr]    

Opcode 8e
Mnemonic "POP A"
Description "Pop A from the stack"
ALUx<-[SP]    
ALUr=[ALUx]+1    
SP<-[ALUr]    
MAR<-[SP]    
MDR<-[M[MAR]]    
A<-[MDR]    

Opcode 8f
Mnemonic "POP B"
Description "Pop B from the stack"
ALUx<-[SP]    
ALUr=[ALUx]+1    
SP<-[ALUr]    
MAR<-[SP]    
MDR<-[M[MAR]]    
B<-[MDR]    

Opcode 90
* data 00 to FF
Mnemonic "MOVE #data,A"
Description "Move an immediate oper. into A"
A<-[IR(operand)]    

Opcode 91
* data 00 to FF
Mnemonic "MOVE #data,B"
Description "Move an immediate oper. into B"
B<-[IR(operand)]    

Opcode 92
* addr 00 to FF
Mnemonic "MOVE addr,A"
Description "Load reg. A from a direct addr."
MAR<-[IR(operand)]    
MDR<-[M[MAR]]    
A<-[MDR]    

Opcode 93
* addr 00 to FF
Mnemonic "MOVE addr,B"
Description "Load reg. B from a direct addr."
MAR<-[IR(operand)]    
MDR<-[M[MAR]]    
B<-[MDR]    

Opcode 94
* addr and (addr) 00 to FF
Mnemonic "MOVE (addr),A"
Description "Load reg. A from an indirect addr."
MAR<-[IR(operand)]    
MDR<-[M[MAR]]    
IR<-[MDR]    
MAR<-[IR(operand)]    
MDR<-[M[MAR]]    
A<-[MDR]    

Opcode 95
* addr and (addr) 00 to FF
Mnemonic "MOVE (addr),B"
Description "Load reg. B from an indirect addr."
MAR<-[IR(operand)]    
MDR<-[M[MAR]]    
IR<-[MDR]    
MAR<-[IR(operand)]    
MDR<-[M[MAR]]    
B<-[MDR]    

Opcode 96
Mnemonic "MOVE B,A"
Description "Move B reg. to A reg."
MDR<-[B]    
A<-[MDR]    

Opcode 97
Mnemonic "MOVE A,B"
Description "Move A reg. to B reg."
MDR<-[A]    
B<-[MDR]    

Opcode 98
Mnemonic "MOVE (B),A"
Description "Load A reg. with a reg. indirect oper."
MAR<-[B]    
MDR<-[M[MAR]]    
A<-[MDR]    

Opcode 99
Mnemonic "MOVE (A),B"
Description "Load B reg. with a reg. indirect oper."
MAR<-[A]    
MDR<-[M[MAR]]    
B<-[MDR]    

Opcode 9a
* addr 00 to FF
Mnemonic "MOVE B+addr,A"
Description "Load A reg from an indexed addr. (index in B)"
ALUy<-[IR(operand)]    
ALUx<-[B]    
ALUr=[ALUx]+[ALUy]    
MAR<-[ALUr]    
MDR<-[M[MAR]]    
A<-[MDR]    

Opcode 9b
* addr 00 to FF
Mnemonic "MOVE A+addr,B"
Description "Load B reg from an indexed addr. (index in A)"
ALUy<-[IR(operand)]    
ALUx<-[A]    
ALUr=[ALUx]+[ALUy]    
MAR<-[ALUr]    
MDR<-[M[MAR]]    
B<-[MDR]    

Opcode a2
* addr 00 to FF
Mnemonic "MOVE A,addr"
Description "Store the A reg. in memory at a direct addr."
MAR<-[IR(operand)]    
MDR<-[A]    
M[MAR]<-[MDR]    

Opcode a3
* addr 00 to FF
Mnemonic "MOVE B,addr"
Description "Store the B reg. in memory at a direct addr."
MAR<-[IR(operand)]    
MDR<-[B]    
M[MAR]<-[MDR]    

Opcode a4
* addr and (addr) 00 to FF
Mnemonic "MOVE A,(addr)"
Description "Store reg. A at a mem. indirect addr."
MAR<-[IR(operand)]    
MDR<-[M[MAR]]    
IR<-[MDR]    
MAR<-[IR(operand)]    
MDR<-[A]    
M[MAR]<-[MDR]    

Opcode a5
* addr and (addr) 00 to FF
Mnemonic "MOVE B,(addr)"
Description "Store reg. B at a mem. indirect addr."
MAR<-[IR(operand)]    
MDR<-[M[MAR]]    
IR<-[MDR]    
MAR<-[IR(operand)]    
MDR<-[B]    
M[MAR]<-[MDR]    

Opcode a6
* data 00 to FF
Mnemonic "MOVE #data,SP"
Description "Move an immediate oper. into SP"
SP<-[IR(operand)]    

Opcode a7
* addr 00 to FF
Mnemonic "MOVE addr,SP"
Description "Load reg. SP from a direct addr."
MAR<-[IR(operand)]    
MDR<-[M[MAR]]    
SP<-[MDR]    

Opcode a8
Mnemonic "MOVE A,(B)"
Description "Store A reg. at an addr. held in B"
MAR<-[B]    
MDR<-[A]    
M[MAR]<-[MDR]    

Opcode a9
Mnemonic "MOVE B,(A)"
Description "Store B reg. at an addr. held in A"
MAR<-[A]    
MDR<-[B]    
M[MAR]<-[MDR]    

Opcode aa
* addr 00 to FF
Mnemonic "MOVE A,B+addr"
Description "Store A reg. at an indexed addr. (index in B)"
ALUy<-[IR(operand)]    
ALUx<-[B]    
ALUr=[ALUx]+[ALUy]    
MAR<-[ALUr]    
MDR<-[A]    
M[MAR]<-[MDR]    

Opcode ab
* addr 00 to FF
Mnemonic "MOVE B,A+addr"
Description "Store B reg. at an indexed addr. (index in A)"
ALUy<-[IR(operand)]    
ALUx<-[A]    
ALUr=[ALUx]+[ALUy]    
MAR<-[ALUr]    
MDR<-[B]    
M[MAR]<-[MDR]    

Opcode ac
* addr and (addr) 00 to FF
Mnemonic "MOVE (addr),SP"
Description "Load reg. SP from an indirect addr."
MAR<-[IR(operand)]    
MDR<-[M[MAR]]    
IR<-[MDR]    
MAR<-[IR(operand)]    
MDR<-[M[MAR]]    
SP<-[MDR]    

Opcode ad
Mnemonic "MOVE A,SP"
Description "Move A reg. to SP reg."
MDR<-[A]    
SP<-[MDR]    

Opcode ae
Mnemonic "MOVE B,SP"
Description "Move B reg. to SP reg."
MDR<-[B]    
SP<-[MDR]    

Opcode b0
* dis 00 to FF, sign extended
Mnemonic "BCC #dis"
Description "Branch on carry clear to a PC relative addr."
if(PSR(c)==0)    
ALUx<-[PC]    
ALUy<-[IR(operand)]    
ALUr=[ALUx]+[ALUy]    
PC<-[ALUr]    

Opcode b1
* dis 00 to FF, sign extended
Mnemonic "BCS #dis"
Description "Branch on carry set to a PC relative addr."
if(PSR(c)==1)    
ALUx<-[PC]    
ALUy<-[IR(operand)]    
ALUr=[ALUx]+[ALUy]    
PC<-[ALUr]    

Opcode b2
* addr 00 to FF
Mnemonic "BCC addr"
Description "Branch to a direct addr. if carry flag clear (C=0)"
if(PSR(c)==0)    
PC<-[IR(operand)]    

Opcode b3
* addr 00 to FF
Mnemonic "BCS addr"
Description "Branch to a direct addr. if carry flag set (C=1)"
if(PSR(c)==1)    
PC<-[IR(operand)]    

Opcode b4
* addr and (addr) 00 to FF
Mnemonic "BCC (addr)"
Description "Branch to an indirect addr. if carry flag is clear"
if(PSR(c)==0)    
MAR<-[IR(operand)]    
MDR<-[M[MAR]]    
IR<-[MDR]    
MAR<-[IR(operand)]    
MDR<-[M[MAR]]    
IR<-[MDR]    
PC<-[IR(operand)]    

Opcode b5
* addr and (addr) 00 to FF
Mnemonic "BCS (addr)"
Description "Branch to an indirect addr. if carry flag is set"
if(PSR(c)==1)    
MAR<-[IR(operand)]    
MDR<-[M[MAR]]    
IR<-[MDR]    
MAR<-[IR(operand)]    
MDR<-[M[MAR]]    
IR<-[MDR]    
PC<-[IR(operand)]    

Opcode b8
* dis 00 to FF, sign extended
Mnemonic "BPL #dis"
Description "Branch on negative clear to a PC relative addr."
if(PSR(n)==0)    
ALUx<-[PC]    
ALUy<-[IR(operand)]    
ALUr=[ALUx]+[ALUy]    
PC<-[ALUr]    

Opcode b9
* dis 00 to FF, sign extended
Mnemonic "BMI #dis"
Description "Branch on negative set to a PC relative addr."
if(PSR(n)==1)    
ALUx<-[PC]    
ALUy<-[IR(operand)]    
ALUr=[ALUx]+[ALUy]    
PC<-[ALUr]    

Opcode ba
* addr 00 to FF
Mnemonic "BPL addr"
Description "Branch to a direct addr. if negative flag clear (N=0)"
if(PSR(n)==0)    
PC<-[IR(operand)]    

Opcode bb
* addr 00 to FF
Mnemonic "BMI addr"
Description "Branch to a direct addr. if negative flag set (N=1)"
if(PSR(n)==1)    
PC<-[IR(operand)]    

Opcode bc
* addr and (addr) 00 to FF
Mnemonic "BPL (addr)"
Description "Branch to an indirect addr. if negative flag is clear"
if(PSR(n)==0)    
MAR<-[IR(operand)]    
MDR<-[M[MAR]]    
IR<-[MDR]    
MAR<-[IR(operand)]    
MDR<-[M[MAR]]    
IR<-[MDR]    
PC<-[IR(operand)]    

Opcode bd
* addr and (addr) 00 to FF
Mnemonic "BMI (addr)"
Description "Branch to an indirect addr. if negative flag is set"
if(PSR(n)==1)    
MAR<-[IR(operand)]    
IR<-[MDR]    
MAR<-[IR(operand)]    
MDR<-[M[MAR]]    
IR<-[MDR]    
PC<-[IR(operand)]    

Opcode c0
* dis 00 to FF, sign extended
Mnemonic "BNE #dis"
Description "Branch on zero clear to a PC relative addr."
if(PSR(z)==0)    
ALUx<-[PC]    
ALUy<-[IR(operand)]    
ALUr=[ALUx]+[ALUy]    
PC<-[ALUr]    

Opcode c1
* dis 00 to FF, sign extended
Mnemonic "BEQ #dis"
Description "Branch on zero set to a PC relative addr."
if(PSR(z)==1)    
ALUx<-[PC]    
ALUy<-[IR(operand)]    
ALUr=[ALUx]+[ALUy]    
PC<-[ALUr]    

Opcode c2
* addr 00 to FF
Mnemonic "BNE addr"
Description "Branch to a direct addr. if zero flag clear (Z=0)"
if(PSR(z)==0)    
PC<-[IR(operand)]    

Opcode c3
* addr 00 to FF
Mnemonic "BEQ addr"
Description "Branch to a direct addr. if zero flag set (Z=1)"
if(PSR(z)==1)    
PC<-[IR(operand)]    

Opcode c4
* addr and (addr) 00 to FF
Mnemonic "BNE (addr)"
Description "Branch to an indirect addr. if zero flag is clear"
if(PSR(z)==0)    
MAR<-[IR(operand)]    
MDR<-[M[MAR]]    
IR<-[MDR]    
MAR<-[IR(operand)]    
MDR<-[M[MAR]]    
IR<-[MDR]    
PC<-[IR(operand)]    

Opcode c5
* addr and (addr) 00 to FF
Mnemonic "BEQ (addr)"
Description "Branch to an indirect addr. if zero flag is set"
if(PSR(z)==1)    
MAR<-[IR(operand)]    
MDR<-[M[MAR]]    
IR<-[MDR]    
MAR<-[IR(operand)]    
MDR<-[M[MAR]]    
IR<-[MDR]    
PC<-[IR(operand)]    

Opcode c8
* dis 00 to FF, sign extended
Mnemonic "BVC #dis"
Description "Branch on no overflow to a PC relative addr."
if(PSR(v)==0)    
ALUx<-[PC]    
ALUy<-[IR(operand)]    
ALUr=[ALUx]+[ALUy]    
PC<-[ALUr]    

Opcode c9
Mnemonic "BVS #dis"
Description "Branch on overflow to a PC relative addr."
if(PSR(v)==1)    
ALUx<-[PC]    
ALUy<-[IR(operand)]    
ALUr=[ALUx]+[ALUy]    
PC<-[ALUr]    

Opcode ca
Mnemonic "BVC addr"
Description "Branch to a direct addr. if overflow flag clear (V=0)"
if(PSR(v)==0)    
PC<-[IR(operand)]    

Opcode cb
Mnemonic "BVS addr"
Description "Branch to a direct addr. if overflow flag set (V=1)"
if(PSR(v)==1)    
PC<-[IR(operand)]    

Opcode cc
* addr and (addr) 00 to FF
Mnemonic "BVC (addr)"
Description "Branch to an indirect addr. if overflow flag is clear"
if(PSR(v)==0)    
MAR<-[IR(operand)]    
MDR<-[M[MAR]]    
IR<-[MDR]    
MAR<-[IR(operand)]    
MDR<-[M[MAR]]    
IR<-[MDR]    
PC<-[IR(operand)]    

Opcode cd
* addr and (addr) 00 to FF
Mnemonic "BVS (addr)"
Description "Branch to an indirect addr. if overflow flag is set"
if(PSR(v)==1)    
MAR<-[IR(operand)]    
MDR<-[M[MAR]]    
IR<-[MDR]    
MAR<-[IR(operand)]    
MDR<-[M[MAR]]    
IR<-[MDR]    
PC<-[IR(operand)]    

Opcode d0
* addr 00 to FF
Mnemonic "JSR addr"
Description "Jump to subroutine at a direct address"
ALUx<-[PC]             }
MDR<-[ALUx]            }     write PC
MAR<-[SP]              }     to the stack
M[MAR]<-[MDR]          }
ALUx<-[SP]                }  decrement
ALUr=[ALUx]-1             }  SP
SP<-[ALUr]                }
PC<-[IR(operand)]    

Opcode d1
* addr and (addr) 00 to FF
Mnemonic "JSR (addr)"
Description "Jump to subroutine at an indirect address"
ALUx<-[PC]             }
MDR<-[ALUx]            }     write PC
MAR<-[SP]              }     to the stack
M[MAR]<-[MDR]          }
ALUx<-[SP]                }  decrement
ALUr=[ALUx]-1             }  SP
SP<-[ALUr]                }
MAR<-[IR(operand)]    
MDR<-[M[MAR]]    
PC<-[MDR]    

Opcode d2
Mnemonic "JSR A"
Description "Jump to subroutine at an addr. held in the A reg."
ALUx<-[PC]             }
MDR<-[ALUx]            }     write PC
MAR<-[SP]              }     to the stack
M[MAR]<-[MDR]          }
ALUx<-[SP]                }  decrement
ALUr=[ALUx]-1             }  SP
SP<-[ALUr]                }
MDR<-[A]    
PC<-[MDR]    

Opcode d3
Mnemonic "JSR B"
Description "Jump to subroutine at an addr. held in the B reg."
ALUx<-[PC]             }
MDR<-[ALUx]            }     write PC
MAR<-[SP]              }     to the stack
M[MAR]<-[MDR]          }
ALUx<-[SP]                }  decrement
ALUr=[ALUx]-1             }  SP
SP<-[ALUr]                }
PC<-[B]    

Opcode d4
Mnemonic "JSR (A)"
Description "Jump to subroutine at an indirect addr. held in the A reg."
ALUx<-[PC]             }
MDR<-[ALUx]            }     write PC
MAR<-[SP]              }     to the stack
M[MAR]<-[MDR]          }
ALUx<-[SP]                }  decrement
ALUr=[ALUx]-1             }  SP
SP<-[ALUr]                }
MAR<-[A]    
MDR<-[M[MAR]]    
PC<-[MDR]    

Opcode d5
Mnemonic "JSR (B)"
Description "Jump to subroutine at an indirect addr. held in the B reg."
ALUx<-[PC]             }
MDR<-[ALUx]            }     write PC
MAR<-[SP]              }     to the stack
M[MAR]<-[MDR]          }
ALUx<-[SP]                }  decrement
ALUr=[ALUx]-1             }  SP
SP<-[ALUr]                }
MAR<-[B]    
MDR<-[M[MAR]]    
PC<-[MDR]    

Opcode d6
* addr 00 to FF
Mnemonic "JSR A+addr"
Description "Jump to subroutine at an indexed addr. (index in A)"
ALUx<-[PC]             }
MDR<-[ALUx]            }     write PC
MAR<-[SP]              }     to the stack
M[MAR]<-[MDR]          }
ALUx<-[SP]                }  decrement
ALUr=[ALUx]-1             }  SP
SP<-[ALUr]                }
ALUy<-[IR(operand)]    
ALUx<-[A]    
ALUr=[ALUx]+[ALUy]    
MAR<-[ALUr]    
MDR<-[M[MAR]]    
PC<-[MDR]    

Opcode d7
* addr 00 to FF
Mnemonic "JSR B+addr"
Description "Jump to subroutine at an indexed addr. (index in B)"
ALUx<-[PC]             }
MDR<-[ALUx]            }     write PC
MAR<-[SP]              }     to the stack
M[MAR]<-[MDR]          }
ALUx<-[SP]                }  decrement
ALUr=[ALUx]-1             }  SP
SP<-[ALUr]                }
ALUy<-[IR(operand)]    
ALUx<-[B]    
ALUr=[ALUx]+[ALUy]    
MAR<-[ALUr]    
MDR<-[M[MAR]]    
PC<-[MDR]    

Opcode d8
Mnemonic "JSR #dis"
Description "Jump to subroutine at a PC relative address"
ALUx<-[PC]             }
MDR<-[ALUx]            }     write PC
MAR<-[SP]              }     to the stack
M[MAR]<-[MDR]          }
ALUx<-[SP]                }  decrement
ALUr=[ALUx]-1             }  SP
SP<-[ALUr]                }
ALUx<-[PC]    
ALUy<-[IR(operand)]    
ALUr=[ALUx]+[ALUy]    
PC<-[ALUr]    

Opcode e0
* addr 00 to FF
Mnemonic "JMP addr"
Description "Jump to a direct addr."
PC<-[IR(operand)]    

Opcode e1
* addr and (addr) 00 to FF
Mnemonic "JMP (addr)"
Description "Jump to an indirect addr."
MAR<-[IR(operand)]    
MDR<-[M[MAR]]    
IR<-[MDR]    
MAR<-[IR(operand)]    
MDR<-[M[MAR]]    
IR<-[MDR]    
PC<-[IR(operand)]    

Opcode e2
Mnemonic "JMP A"
Description "Jump to an addr. held in the A reg."
MDR<-[A]    
PC<-[MDR]    

Opcode e3
Mnemonic "JMP B"
Description "Jump to an addr. held in the B reg."
PC<-[B]    

Opcode e4
Mnemonic "JMP (A)"
Description "Jump to a reg. indirect addr."
MAR<-[A]    
MDR<-[M[MAR]]    
PC<-[MDR]    

Opcode e5
Mnemonic "JMP (B)"
Description "Jump to a reg. indirect addr."
MAR<-[B]    
MDR<-[M[MAR]]    
PC<-[MDR]    

Opcode e6
* addr 00 to FF
Mnemonic "JMP A+addr"
Description "Jump to an indexed addr. (index in A)"
ALUy<-[IR(operand)]    
ALUx<-[A]    
ALUr=[ALUx]+[ALUy]    
MAR<-[ALUr]    
MDR<-[M[MAR]]    
PC<-[MDR]    

Opcode e7
* addr 00 to FF
Mnemonic "JMP B+addr"
Description "Jump to an indexed addr. (index in B)"
ALUy<-[IR(operand)]    
ALUx<-[B]    
ALUr=[ALUx]+[ALUy]    
MAR<-[ALUr]    
MDR<-[M[MAR]]    
PC<-[MDR]    

Opcode e8
Mnemonic "JMP #dis"
Description "Jump to a PC relative address"
ALUx<-[PC]    
ALUy<-[IR(operand)]    
ALUr=[ALUx]+[ALUy]    
PC<-[ALUr]    

Opcode f0
Mnemonic "HALT"
Description "Halt processor"
HALT    

Opcode f1
Mnemonic "RTS"
Description "Return from subroutine"
ALUx<-[SP]            }     increment
ALUr=[ALUx]+1         }     SP
SP<-[ALUr]            }
MAR<-[SP]                }  recover PC
MDR<-[M[MAR]]            }  from the stack
PC<-[MDR]                }

Opcode f2
Mnemonic "NOP"
Description "No operation"
NOP    

Opcode ff
Mnemonic "RTI"
Description "Return from interrupt"
*
* Recover PC and PSR from the stack
*
ALUx<-[SP]            }     increment
ALUr=[ALUx]+1         }     SP
SP<-[ALUr]            }
MAR<-[SP]                }  recover PC
MDR<-[M[MAR]]            }  from the stack
PC<-[MDR]                }
ALUx<-[SP]            }     increment
ALUr=[ALUx]+1         }     SP
SP<-[ALUr]            }
MAR<-[SP]                }  recover PSR
MDR<-[M[MAR]]            }  from the stack
PSR<-[MDR]               }

Opcode f3
Mnemonic "INTE"
Description "Enable interrupts"
PSR(E)=1    

Opcode f4
Mnemonic "INTD"
Description "Disable interrupts"
PSR(E)=0    
